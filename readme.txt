Задача

Настроить запуск веб-приложения (на порту 7000) и доступ к нем через реверс-прокси (nginx, порт 80) в docker-compose.
##############################################################################################

 1) Скачиваем  на локальную машину  фаилы  из https://github.com/ilgizy/test-web-app/
 2) Собирем с помощью команд 
 docker build -t test-web-app -f ./TestWebApp/Dockerfile .
docker run -d -p 7000:80 test-web-app
 либо используя  ./Dockerfile
 3) Проверяем работу приложения   http://localhost:7000/api-docs
останавливаем контейнер  docker stop test-web-app
4) Скачиваем контейнер nginx: на машине с  docker выполняем docker nginx
5) копируем и запускаем  docker-compose.yml
  в docker-compose.yml указаны пробросы для конфигурациоонного фаила через относительный путь ./nginx/nginx.conf: логирования ./nginx/log

6)Проверяем работу приложения  http://localhost/api-docs
 
##############################################################################################
Задача

Провести нагрузочное тестирование приложения(методов api/Values и api/Values/{id})  средствами artillery.io или jmeter  с постепенным увеличением нагрузки. 
 Определить предельное количество запросов в секунду для контейнера с приложением использующего 512 MB памяти и 1 CPU, с числом ошибок обработки запросов не более 10% 
 
 ##############################################################################################
 
1) Ограничение контейнера приложения использующего 512 MB памяти и 1 CPU заданы в фаиле docker-compose.yml. 

artillery.io
для артиллери IO  тестирование произвезедно с виртуальной машины находящейся в одной подсети с тестируемой машиной. Запросы проксируются через  NGINX.  

Итоговый скрипт нагрузки  в приложении к письму.


запускаем artillery run -o report.json hit.yaml
Создание отчета в графическом виде. 
artillery report report.json


